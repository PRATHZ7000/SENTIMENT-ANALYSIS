# -*- coding: utf-8 -*-
"""Prathamesh Murkute Task 4 SENTIMENT ANALYSIS .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cqhpOTZ7cc0t_ZJ3rRsQL1Hi6Phww7U0
"""

import pandas as pd

# Load the CSV file
df = pd.read_csv('/content/drive/MyDrive/task data set/College.csv')

# Display the first few rows
df.head()

# Check for missing values
df.isnull().sum()

# Drop rows with missing text
# df = df.dropna(subset=['TextColumnName'])  # Removed this line as 'TextColumnName' does not exist

# Reset index
df.reset_index(drop=True, inplace=True)

import nltk
import re
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer

nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
stemmer = PorterStemmer()

def preprocess_text(text):
    text = re.sub('[^a-zA-Z]', ' ', str(text)).lower() # Convert to string to handle potential non-string entries
    words = text.split()
    words = [stemmer.stem(w) for w in words if w not in stop_words]
    return ' '.join(words)

df['clean_text'] = df['Unnamed: 0'].apply(preprocess_text)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f"Training set shape: {X_train.shape}")
print(f"Testing set shape: {X_test.shape}")

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['clean_text']).toarray()
y = df['Private']  # Target variable (sentiment)

# Encode labels if needed
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix

model = MultinomialNB()
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print(classification_report(y_test, y_pred))

import seaborn as sns
import matplotlib.pyplot as plt

# Sentiment distribution
sns.countplot(x='Private', data=df)
plt.title('Distribution of College Type (Private)')
plt.show()